{"version":3,"sources":["Book.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","handleData","data","Array","isArray","handleArrays","length","join","id","title","authors","publisher","image","previewLink","react_default","a","createElement","className","key","src","class","href","target","App","state","query","books","isLoading","errorMsg","checkInput","_this","searchBooks","setState","handleKeyDown","e","console","log","keyCode","BASE_URL","concat","fetch","method","then","response","json","items","handleChange","event","value","_this2","this","_this$state","type","placeholder","onChange","onKeyDown","onClick","map","book","volumeInfo","src_Book","imageLinks","smallThumbnail","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5895bb8a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Book = props => {\n  // handle book data of any type\n  const handleData = data => {\n    return data ? (Array.isArray(data) ? handleArrays(data) : data) : null;\n  };\n  // handle book data of the array type\n  const handleArrays = data => {\n    return !data ? \"\" : data.length > 0 ? data.join(\", \") : \"\";\n  };\n  // unpack props\n  const { id, title, authors, publisher, image, previewLink } = props;\n  return (\n    <li className=\"book__box\" key={id}>\n      <div className=\"book__header\">\n        <h2 className=\"heading--secondary\">{title}</h2>{\" \"}\n      </div>\n      <div className=\"book__body\">\n        <div className=\"book__image-container\">\n          {image !== \"\" ? (\n            <img className=\"book-thumbnail book-thumbnail--img\" src={image} />\n          ) : (\n            <div className=\"book-thumbnail book-thumbnail--missing\">\n              <span className=\"\">Image not found</span>\n            </div>\n          )}\n        </div>\n        <div class=\"book__details-container\">\n          {authors !== \"\" ? (\n            <p className=\"book__body--detail\">By: {handleData(authors)}</p>\n          ) : (\n            <p className=\"book__body--detail\">Author not found</p>\n          )}\n          {publisher !== \"\" ? (\n            <p className=\"book__body--detail\">\n              Publisher: {handleData(publisher)}\n            </p>\n          ) : (\n            <p className=\"book__body--detail\">Publisher not found</p>\n          )}\n\n          <a className=\"btn book-link-btn\" href={previewLink} target=\"blank\">\n            See this book\n          </a>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default Book;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Book from \"./Book\";\n\nclass App extends Component {\n  state = {\n    query: \"\",\n    books: [],\n    isLoading: false,\n    errorMsg: \"\"\n  };\n  checkInput = () => {\n    this.state.query\n      ? this.searchBooks()\n      : this.setState({\n          errorMsg: \"Error: please provide a search query first\"\n        });\n  };\n  handleKeyDown = e => {\n    console.log(e);\n    if (e.keyCode === 13) {\n      this.checkInput();\n    }\n  };\n  searchBooks = () => {\n    let query = this.state.query;\n    const BASE_URL = `https://www.googleapis.com/books/v1/volumes?q=${query}`;\n    this.setState({\n      isLoading: true,\n      errorMsg: \"\"\n    });\n    fetch(BASE_URL, { method: \"GET\" })\n      .then(response => response.json())\n      .then(json => {\n        let { items } = json;\n        console.log(items);\n        this.setState({\n          books: items,\n          isLoading: false\n        });\n      });\n  };\n  handleChange = event => {\n    this.setState({\n      query: event.target.value\n    });\n  };\n  render() {\n    const { books, errorMsg } = this.state;\n    return (\n      <div className=\"App\">\n        {/* Upper area */}\n        <h1 className=\"heading--primary\">\n          Book Finder <i class=\"fas fa-book\" />\n        </h1>\n        <div className=\"action__container\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            placeholder=\"Search by book, title, or author...\"\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyDown}\n          />\n          <button className=\"btn search-btn\" onClick={this.checkInput}>\n            Search\n          </button>\n          {this.state.isLoading && <p className=\"loading-msg\">Loading...</p>}\n          {this.state.errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\n        </div>\n        {/* Search result area */}\n        {books.length === 0 ? (\n          <p className=\"initial-msg\">\n            <i class=\"far fa-frown\" /> Nothing Here Yet - Try Searching For a\n            Book\n          </p>\n        ) : (\n          <ul className=\"books__container\">\n            {books.map(book => {\n              const { id, volumeInfo } = book;\n              return (\n                <Book\n                  handleData={this.handleData}\n                  key={id}\n                  title={volumeInfo.title}\n                  authors={volumeInfo.authors ? volumeInfo.authors : \"\"}\n                  publisher={volumeInfo.publisher ? volumeInfo.publisher : \"\"}\n                  image={\n                    volumeInfo.imageLinks\n                      ? volumeInfo.imageLinks.smallThumbnail\n                      : \"\"\n                  }\n                  previewLink={volumeInfo.previewLink}\n                />\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}